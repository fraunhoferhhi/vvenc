/* -----------------------------------------------------------------------------
The copyright in this software is being made available under the BSD
License, included below. No patent rights, trademark rights and/or 
other Intellectual Property Rights other than the copyrights concerning 
the Software are granted under this license.

For any license concerning other Intellectual Property rights than the software,
especially patent licenses, a separate Agreement needs to be closed. 
For more information please contact:

Fraunhofer Heinrich Hertz Institute
Einsteinufer 37
10587 Berlin, Germany
www.hhi.fraunhofer.de/vvc
vvc@hhi.fraunhofer.de

Copyright (c) 2019-2021, Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Forschung e.V.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of Fraunhofer nor the names of its contributors may
   be used to endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.


------------------------------------------------------------------------------------------- */


/** \file     Rom.cpp
    \brief    global variables & functions
*/

#include "Rom.h"
#include "UnitTools.h"

#include <memory.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <iomanip>

//! \ingroup CommonLib
//! \{

namespace vvenc {

// ====================================================================================================================
// Initialize / destroy functions
// ====================================================================================================================

#if ENABLE_TRACING
CDTrace *g_trace_ctx = nullptr;
#endif

#if ENABLE_TIME_PROFILING
TimeProfiler *g_timeProfiler = nullptr;
#elif ENABLE_TIME_PROFILING_EXTENDED
TimeProfiler2D *g_timeProfiler = nullptr;
#endif
#if ENABLE_CU_MODE_COUNTERS
StatCounters::StatCounter2DSet<int64_t> g_cuCounters1D( std::vector<std::string> { g_cuCounterIdNames, std::end( g_cuCounterIdNames ) }, 8, 1 );
StatCounters::StatCounter2DSet<int64_t> g_cuCounters2D( std::vector<std::string> { g_cuCounterIdNames, std::end( g_cuCounterIdNames ) }, MAX_CU_SIZE_IDX, MAX_CU_SIZE_IDX );
#endif

std::function<void( int, const char*, va_list )> g_msgFnc = nullptr;

// ====================================================================================================================
// LFNST Tables
// ====================================================================================================================
  const static uint8_t g_auiXYDiagScan8x8[64][2] = {
    { 0, 0 }, { 0, 1 }, { 1, 0 }, { 0, 2 }, { 1, 1 }, { 2, 0 }, { 0, 3 }, { 1, 2 }, { 2, 1 }, { 3, 0 }, { 1, 3 },
    { 2, 2 }, { 3, 1 }, { 2, 3 }, { 3, 2 }, { 3, 3 }, { 0, 4 }, { 0, 5 }, { 1, 4 }, { 0, 6 }, { 1, 5 }, { 2, 4 },
    { 0, 7 }, { 1, 6 }, { 2, 5 }, { 3, 4 }, { 1, 7 }, { 2, 6 }, { 3, 5 }, { 2, 7 }, { 3, 6 }, { 3, 7 }, { 4, 0 },
    { 4, 1 }, { 5, 0 }, { 4, 2 }, { 5, 1 }, { 6, 0 }, { 4, 3 }, { 5, 2 }, { 6, 1 }, { 7, 0 }, { 5, 3 }, { 6, 2 },
    { 7, 1 }, { 6, 3 }, { 7, 2 }, { 7, 3 }, { 4, 4 }, { 4, 5 }, { 5, 4 }, { 4, 6 }, { 5, 5 }, { 6, 4 }, { 4, 7 },
    { 5, 6 }, { 6, 5 }, { 7, 4 }, { 5, 7 }, { 6, 6 }, { 7, 5 }, { 6, 7 }, { 7, 6 }, { 7, 7 }
  };

  const uint8_t g_lfnstLut[NUM_INTRA_MODE + NUM_EXT_LUMA_MODE - 1] = {
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

const int8_t g_lfnst8x8[4][2][16][48] = {
  { // 0
    {
      { -117, 28, 18, 2, 4, 1, 2, 1, 32, -18, -2, 0, -1, 0, 0, 0, 14, -1, -3, 0, -1, 0, 0, 0,
        2,    0,  0,  0, 0, 0, 0, 0, 3,  0,   -1, 0, 1,  0, 0, 0, 1,  0,  0,  0, 1,  0, 0, 0 },
      { -29, -91, 47, 1, 9, 0, 3, 0, -54, 26, -8, 3, 0,  1, 0, 0, 33, 5, -9, -1, -2, 0, -1, 0,
        -3,  3,   0,  0, 0, 0, 0, 0, 7,   2,  -2, 0, -1, 1, 0, 0, 2,  1, -1, 0,  0,  0, 0,  0 },
      { -10, 62, -11, -8, -2, -2, -1, -1, -95, 3,  32, 0, 4, 0, 2,  0, 32, -30, -4, 4, -1, 1, 0, 0,
        6,   2,  -5,  0,  0,  0,  0,  0,  6,   -3, 0,  0, 2, 0, -1, 0, 2,  -1,  0,  0, 1,  0, 0, 0 },
      { -15, 15,  -10, -2, 1, 0, 1, 0, 10, 112, -20, -17, -4, -4, -1, -2, -20, -26, 31, 1, 0, 0,  0, 0,
        2,   -16, -1,  6,  0, 1, 0, 0, 1,  -4,  0,   0,   0,  -3, 0,  1,  0,   -1,  0,  0, 0, -2, 0, 0 },
      { 32,  39, 92, -44, 4, -10, 1, -4, 26, 12, -15, 13, -5, 2, -2, 0, 29, -16, -22, 8, 0,  1, 0, 1,
        -20, 6,  4,  -3,  1, 0,   0, 0,  1,  -4, -3,  2,  -4, 1, 0,  0, 1,  -1,  -2,  1, -2, 0, 0, 0 },
      { -10, 1,   50,  -15, 2,  -3, 1,  -1, -28, -15, 14, 6, 1, 1,  1,  0, -99, -4, 9,  5, 5, 2, 2,  1,
        44,  -10, -11, 1,   -2, 0,  -1, 0,  -5,  4,   -3, 0, 8, -1, -2, 0, -2,  1,  -1, 0, 4, 0, -1, 0 },
      { 1,  -33, -11, -14, 7, -2, 2, 0,  29, -12, 37, -7, -4, 0, -1, 0, 6,  -99, 3, 26, -1, 5, 0,  2,
        14, 30,  -27, -2,  1, -1, 0, -1, -6, 6,   6,  -3, 1,  3, -3, 0, -1, 1,   1, 0,  0,  1, -1, 0 },
      { 0, 6,  -6, 21, -4, 2,  0, 0,  -20, -24, -104, 30, 5, 5, 1, 2,  -7, -46, 10, -14, 7, 0, 1, 0,
        9, 21, 7,  -6, -2, -1, 0, -1, 2,   2,   5,    -2, 0, 3, 4, -1, 0,  0,   1,  0,   0, 1, 2, -1 },
      { -13, -13, -37, -101, 29, -11, 8, -3, -12, -15, -20, 2, -11, 5, -2, 1, -12, 10, 26, 12, -6, 0, -1, 0,
        -32, -2,  11,  3,    3,  -1,  1, 0,  11,  -5,  -1,  6, -4,  2, 1,  0, 3,   -1, 1,  2,  -1, 0, 0,  0 },
      { 6,   1, -14, -36, 9,  -3, 2,  0, 10,  9,  -18, -1, -3, 1,  0,  0, 38, 26, -13, -1, -5, -1, -1, 0,
        102, 3, -14, -1,  -5, -1, -2, 0, -29, 10, 10,  0,  10, -4, -1, 1, -7, 1,  2,   1,  2,  -1, 0,  0 },
      { -12, -2, -26, -12, -9, 2,  -1, 1,  -3, 30, 4,  34, -4, 0, -1, 0,  -30, 3,  -92, 14, 19, 0, 3, 0,
        -11, 34, 21,  -33, 1,  -2, 0,  -1, -9, -4, 18, 3,  2,  0, 0,  -2, -1,  -1, 3,   0,  0,  0, 0, -1 },
      { 0,  -3,  0,  -4, -15, 6, -3, 1, -7,  -15, -28, -86, 19, -5, 4, -1, -5, -17, -41, 42, -6, 2,  -1, 1,
        -1, -40, 37, 13, -4,  2, -1, 1, -10, 13,  -1,  -4,  4,  -4, 3, 4,  -2, 2,   -1,  -1, 1,  -1, 1,  2 },
      { -1,  9,  13, 5,  14, -2, 2, -1, -8,  3,  -4, -62, 4, 1,  1,  0, -12, 23, 16, -11, -17, 0, -1, 0,
        -11, 97, -3, -3, 0,  -6, 0, -2, -21, -5, 23, 0,   2, -2, -1, 6, -3,  -3, 1,  0,   0,   0, 0,  2 },
      { 6,  2,  -3, 2,  10, -1, 2,  0, 8,   3,  -1,  -20, 0,   1,  0, 0,  -4, 4,  -16, 0, -2, 0, 1, 0,
        34, 23, 6,  -7, -4, -2, -1, 0, 108, -5, -30, 6,   -27, 10, 7, -2, 11, -3, -1,  1, -4, 1, 0, 1 },
      { 6,  9,   -2, 35, 110, -22, 11, -4, -2, 0, -3, 1,  -18, 12, -3, 2, -5, -4, -22, 8,  -25, 3, 0, 0,
        -3, -21, 2,  -3, 9,   -2,  1,  0,  -7, 1, 3,  -5, 3,   0,  -1, 0, 0,  1,  0,   -1, 1,   0, 0, 0 },
      { -1,  7, -2,  9,  -11, 5,  -1, 1, -7, 2,  -22, 4,   -13, 0,  -1, 0, 0, 28, 0, 76, 4,  -6, 0, -2,
        -13, 5, -76, -4, 33,  -1, 3,  0, 9,  18, -3,  -35, -4,  -1, 6,  1, 1, 2,  0, -3, -1, 0,  2, 0 },
    },
    {
      { -108, 48, 9, 1, 1, 1, 0, 0, 44, -6, -9, -1, -1, 0, -1, 0, 9, -9, -1, 1, 0, 0, 0, 0,
        3,    -1, 1, 0, 0, 0, 0, 0, 1,  -1, 0,  0,  1,  0, 0,  0, 0, -1, 0,  0, 0, 0, 0, 0 },
      { 55, 66, -37, -5, -6, -1, -2, 0, 67, -30, -20, 4, -2, 0, -1, 0, -31, -19, 14, 4, 1, 1, 1, 0,
        -6, 3,  5,   -2, 0,  0,  0,  0, -7, -1,  1,   0, -1, 1, 1,  0, -2,  -1,  1,  0, 0, 0, 0, 0 },
      { 2,  86, -21, -13, -4, -2, -1, -1, -88, 5,  6, 4, 5, 1,  1, 0, 14, -5, 0, 3, 0, 0, 0, 0,
        10, -5, -2,  0,   -1, 0,  0,  0,  6,   -5, 0, 1, 2, -1, 0, 0, 1,  -1, 0, 0, 1, 0, 0, 0 },
      { -24, -21, -38, 19, 0,  4,  -1, 2, -23, -89, 31, 20, 2, 3, 1,  1,  -30, 26, 36, -8, -2, -2, 0,  -1,
        14,  18,  -7,  -9, -1, -1, 0,  0, 1,   3,   -2, -1, 3, 2, -2, -1, 0,   1,  0,  0,  1,  1,  -1, 0 },
      { 9,  20, 98, -26, -3, -5, 0, -2, -9, -26, 15, -16, 2, 0, 1,  0, -61, -3, -2, 3, 7, 1, 1,  0,
        12, 16, -6, -1,  0,  -1, 0, 0,  2,  0,   -8, 1,   3, 1, -1, 1, 0,   -1, -2, 0, 1, 0, -1, 0 },
      { -21, -7, -37, 10, 2,  2, -1, 1, -10, 69, -5, -7, -2, -2, 0, -1, -93, 2, 19, 0, 3, 0,  2, 0,
        17,  4,  0,   0,  -1, 0, 0,  0, 5,   -4, -2, 0,  4,  -2, 0, 1,  0,   0, 0,  0, 2, -1, 0, 0 },
      { -10, -25, 4,  -17, 8,  -2, 2, -1, -27, -17, -71, 25, 8,  2, 1, 1,  -4, -66, 28, 36, -5, 3, 0, 1,
        -10, 20,  33, -13, -8, 0,  0, -1, 3,   6,   -3,  -7, -1, 3, 3, -1, 1,  0,   -1, 0,  0,  1, 1, -1 },
      { 2,   5, 10, 64, -9, 4, -3, 1, -4, 8,  62, 3,  -17, 1, -2, 0, -3, -75, 5,  -14, 1, 4, 0,  1,
        -36, 3, 18, -4, 4,  0, 1,  0, 1,  14, -2, -8, -2,  1, -3, 0, 2,  2,   -1, -2,  0, 1, -1, 0 },
      { -11, -15, -28, -97, 6, -1, 4, -1, 7,  3, 57, -15, 10, -2, 0,  -1, -1, -27, 13, 6, 1,  -1, 0,  0,
        -34, -6,  0,   3,   4, 1,  2, 0,  -2, 8, 1,  5,   -2, 0,  -3, 1,  1,  1,   0,  2, -1, 0,  -1, 0 },
      { 9, 13, 24, -6,  7,  -2, 1, -1, 16, 39, 20,  47, -2, -2, -2, 0,  28, 23, 76, -5, -25, -3, -3, -1,
        6, 36, -7, -39, -4, -1, 0, -1, 2,  -4, -18, -3, -1, -1, -2, -2, 1,  -2, -2, 0,  0,   0,  -1, -1 },
      { -7,   11,  12, 7, 2, -1, 0, -1, -14, -1, -24, 11, 2, 0, 0,  0,  -20, 48, 11, -13, -5, -2, 0, -1,
        -105, -19, 17, 0, 6, 2,  3, 0,  -14, 8,  8,   2,  1, 2, -1, -2, 3,   0,  -1, 0,   0,  0,  0, 0 },
      { 0,  0,   7,  -6, 23, -3, 3, -1, 5, 1,  18, 96, 13, -9, -1, -1, -21, -7, -42, 14, -24, -3, 0, 0,
        11, -47, -7, 3,  -5, 9,  1, 2,  0, -1, 19, -1, 1,  0,  -1, -6, -1,  1,  2,   0,  1,   0,  0, -2 },
      { -2,  -6, -1,  -10, 0,  1,  1, 0, -7, -2,  -28, 20, -15, 4, -3, 1,  -2, -32, -2, -66, 3,  7, 1, 2,
        -11, 13, -70, 5,   43, -2, 3, 0, 8,  -14, -3,  43, -1,  2, 7,  -1, 1,  -2,  1,  3,   -1, 1, 1, 0 },
      { -1,  6,  -16, 0,  24, -3, 1, -1, 2,  6,  6,   16, 18, -7, 1,  -1, -3, 11, -63, 9, 4, -5, 2, -1,
        -22, 94, -4,  -6, -4, -4, 1, -2, 10, 23, -19, -5, 0,  -6, -4, 6,  3,  -2, 1,   1, 0, -1, 0, 0 },
      { -5, -6, -3, -19, -104, 18, -4, 3, 0,  6, 0,  35, -41, 20, -2, 2,  -2, 10, -18, 16, 21, 3, -2, 0,
        -2, 11, 6,  -10, 6,    -3, -1, 0, -1, 5, -1, -6, -1,  -1, -1, -1, -1, 0,  0,   0,  0,  0, 0,  -1 },
      { -1,  -2, 0,   23, -9, 0,  -2, 0,  1,   1,   8,   -1, 29, 1, 1,  0, 3, -6, 13, 76, 30, -11, -1, -2,
        -26, -8, -69, 7,  -9, -7, 3,  -1, -10, -34, -25, 13, -1, 0, 11, 5, 1, -1, 1,  -2, 0,  0,   2,  0 },
    } },
  { // 1
    {
      { 110, -49, -3, -4, -1, -1, 0, -1, -38, -1, 10, 0, 2,  0, 1, 0, -9, 13, 1, -2, 0,  0, 0, 0,
        -4,  2,   -3, 0,  0,  0,  0, 0,  -2,  2,  0,  1, -1, 1, 0, 0, -1, 1,  0, 0,  -1, 0, 0, 0 },
      { -43, -19, 17, -1, 3, 0, 1, 0, -98, 46, 14, -1, 2, 0,  1, 0, 26, 26, -15, -3, -2, -1, -1, 0,
        11,  -7,  -9, 2,  0, 0, 0, 0, 9,   -3, -1, 2,  3, -3, 0, 0, 4,  -1, 0,   0,  2,  -1, 0,  0 },
      { -19, 17, -7,  3,   -2, 1,  -1, 0,  -32, -59, 29,  3, 4, 0, 2,  0, -72, 43, 34, -9, 3, -2, 1,  -1,
        13,  36, -18, -10, 0,  -2, 0,  -1, 3,   0,   -12, 3, 6, 1, -3, 2, 1,   -1, -2, 0,  3, 1,  -1, 1 },
      { -35, -103, 39, 1,  7, 0,  2, 0, 38, -13, 25, -6, 1,  -1, 0,  0, -1, 7, 6,  -7, 1,  -1, 0,  0,
        -13, 14,   2,  -4, 2, -1, 0, 0, -2, 11,  -6, -2, -2, 4,  -3, 0, 0,  3, -2, 0,  -1, 1,  -1, 0 },
      { 9,  5,   -6,  -1, -1, 0, -1, 0, 42, 4,   21, -11, 1, -3, 1,  -1, 21, 70, -32, -21, 0, -4, -1, -1,
        34, -26, -57, 11, 4,  2, 0,  1, -4, -32, 5,  24,  1, -6, 12, 4,  -3, -2, 4,   -2,  0, -1, 0,  0 },
      { -5, -5,  -28, 9,  -3, 2, -1, 1, -20, -78, 22, 16, 1,  3, 0, 1,  80, -6, 25, -5, -4, -1, -1, 0,
        6,  -24, 7,   -9, 0,  0, 0,  0, -7,  3,   13, -4, -3, 5, 1, -5, -2, 3,  1,  -2, -1, 2,  -1, -2 },
      { 14, 17, 27,  -12, 1, -3, 1, -1, 8,  19,  -13, 4,  -2, 1,   -1, 0,  48, -1, 48, -15, -4, -2, -1, -1,
        1,  60, -28, -42, 5, -6, 1, -2, 11, -11, -51, 11, -2, -10, -2, 13, 2,  -6, -4, 4,   -2, -3, 2,  2 },
      { 7,   35, 17, -4, -1, 0, 0, 0, 3,   8,  54, -17, 1, -2, 1,   -1, 10, 14, -11, -34, 4, -4, 1,  -1,
        -80, -7, -6, 2,  15, 0, 3, 0, -16, 46, 1,  3,   2, 7,  -24, 0,  2,  -2, -5,  8,   1, -1, -2, 2 },
      { -13, -27, -101, 24,  -8, 6, -3, 2, 11, 43, 6,   28, -6, 3,  -1, 1, -3, 14, 21, -12, -7, -2, -1, -1,
        -23, 10,  -4,   -12, 3,  0, 1,  0, 2,  9,  -10, 0,  1,  -5, -4, 4, 2,  -2, 2,  2,   0,  -2, 1,  0 },
      { -11, -13, -3,  -10, 3,  -1, 1, 0, -19, -19, -37, 8,  4,  2, 0,  1, -12, -30, 3, -9, 5,  0, 1, 0,
        -56, -9,  -47, 8,   21, 1,  4, 1, -11, -30, 10,  59, -2, 8, 41, 8, 2,   5,   6, -7, -1, 3, 5, -2 },
      { -4,  -10, -24, -11, 3, -2, 0, -1, -6, -37, -45, -17, 8,  -2,  2,   -1, 17, 14,  -58, 14, 15, 0,  2, 0,
        -10, 34,  -7,  28,  4, -1, 1, 0,  23, 34,  -31, 4,   10, -22, -30, 22, 4,  -15, 9,   20, 2,  -5, 9, 4 },
      { -2,  1,  13, -17, 3,   -5, 1,  -2, 3,   0, -55, 22,  6, 1,  1,  0,   8,  74, 21, 40, -14, 0, -2, 0,
        -36, -8, 11, -13, -23, 1,  -3, 0,  -36, 6, 16,  -14, 2, 19, -4, -12, -1, 0,  -7, -3, 0,   2, -2, -1 },
      { 3, 1,  5,   -15, 1,  -2, 1, -1, 7,  4,  -7, 29, -1, 2, -1, 1,   8, 3,   12,  -14, -9, -1, -1, 0,
        4, 29, -15, 31,  10, 4,  1, 1,  61, 22, 55, 14, 13, 3, -9, -65, 1, -11, -21, -7,  0,  0,  -1, 3 },
      { -4, -8,  -1,  -50, 6,  -4, 2, -2, -1,  5,  -22, 20, 6, 1, 0,   0,  -16, -15, 18, -29, -11, 2, -2, 1,
        40, -45, -19, -22, 31, 2,  4, 1,  -25, 41, 0,   12, 9, 7, -42, 12, -3,  -14, 2,  28,  5,   1, 6,  2 },
      { 5,  -1,  26,  102, -13, 12, -4, 4, -4, -2, -40, -7, -23, 3, -5,  1,  -1, 5,   8,  -23, 7, 2, 1, 1,
        10, -11, -13, -3,  12,  -3, 2,  0, -9, 23, 4,   9,  14,  9, -14, -4, 0,  -12, -7, 6,   3, 0, 6, 3 },
      { -5, -6, -27, -22, -12, 0,  -3, 0,  -5,  8,  -20, -83, 0,   0,  0, 0,   9,  7,  24,  -20, 41, 3, 6,  1,
        15, 20, 12,  11,  17,  -9, 1,  -2, -26, -1, 18,  -1,  -12, 32, 3, -18, -5, 10, -25, -5,  -2, 1, -8, 10 },
    },
    {
      { 80, -49, 6, -4, 1, -1, 1, -1, -72, 36, 4,  0,  1,  0,  0,  0, 26, 0, -12, 2, -2, 1,  -1, 0,
        -7, -9,  6, 1,  0, 0,  0, 0,  3,   5,  -1, -2, -2, -2, -1, 1, 1,  1, 0,   0, -1, -1, 0,  0 },
      { -72, -6, 17, 0,  3, 0,  1, 0, -23, 58, -21, 2, -3, 1,  -1, 0, 55, -46, -1, 6,  -2, 1,  -1, 0,
        -22, 7,  17, -7, 2, -1, 1, 0, 9,   5,  -12, 1, -3, -4, 4,  2, 4,  1,   -2, -1, -1, -1, 1,  0 },
      { -50, 19,  -15, 4,  -1, 1, -1, 1, -58, -2, 30, -3,  4, -1, 2,   0, 6,  57, -34, 0, -2, 0, -1, 0,
        34,  -48, -2,  14, -4, 3, -1, 1, -10, 7,  21, -10, 6, 1,  -11, 0, -1, -1, 4,   2, 3,  0, -2, -1 },
      { -33, -43, 28,  -7, 4,  -2, 2,  -1, -38, 11,  -8, 4,  1,  1,  0,  0,   -55, 24, 26,  -5, 2, -1, 1, 0,
        15,  46,  -40, -1, -1, 0,  -1, 0,  17,  -38, 1,  17, -3, 11, 15, -11, 3,   -1, -10, 1,  0, 1,  3, 2 },
      { 10,  66, -21, -3, -3, 0,  -1, 0,  -53, -41, -2, 16, -1, 4,  -1, 1,  36, -5, 41, -20, 3, -3, 1, -1,
        -30, 26, -32, -3, 7,  -2, 2,  -1, 15,  -8,  1,  17, -1, -2, 4,  -8, 2,  0,  -1, 3,   0, 0,  0, -1 },
      { 18, 14,  13,  -9, 2,  -2, 1,  -1, 34, 32,  -31, 12, -5,  2,  -2, 1,   40, 4,  -4, -9, -3, -2, -1, -1,
        27, -31, -43, 19, -2, 3,  -1, 1,  7,  -49, 52,  10, -11, 22, 7,  -26, -1, -6, -9, 6,  -2, 2,  4,  -2 },
      { 21, 66, -1, 9,   -4, 2,  -1, 1,  -21, 41,  -30, -10, 0, -2, 0,  -1, -35, -17, -3, 26, -6, 5,  -2, 2,
        56, 3,  18, -25, -1, -2, -1, -1, -15, -13, -27, 9,   9, -6, 20, 5,  -3,  2,   -6, -9, 3,  -3, 1,  5 },
      { 1,  -6, -24, 17,  -5, 3,  -2, 1, 24, 10,  39,  -21, 5, -4,  2,  -1, 33, 32, -30, 4,   -3, -1, -1, 0,
        -4, 13, -16, -10, 0,  -1, 0,  0, 24, -26, -37, 33,  5, -32, 55, -5, -7, 22, -14, -22, 1,  -9, -3, 13 },
      { 9,   33, -24, 1,  4,   0, 1,  0, 6,  50,  26, 1,   -10, 0,  -2,  0,  -27, 1,  -28, -21, 16, -5, 3,  -2,
        -23, 36, -2,  40, -17, 4, -3, 1, 43, -13, 4,  -41, -19, -2, -24, 17, 11,  -4, 8,   4,   -3, -3, -3, -3 },
      { -7,  -9,  -32, 14, -3, 3, -1, 1, -23, -28, 0,  -5, -1,  0,  0,  0,   -36, -59, -24, 14,  4,  2,  1, 1,
        -23, -26, 23,  26, -3, 5, 0,  2, 10,  -26, 38, 7,  -12, 11, 42, -22, -5,  20,  -14, -15, -1, -2, 1, 6 },
      { 6,   30,  69, -18, 5,  -4, 3,  -1, -3, -11, -34, -16, 9, -4,  2, -1,  -16, 35, -35, 30, -9, 3,  -2, 1,
        -57, -13, 6,  4,   -5, 5,  -1, 1,  28, 10,  4,   7,   0, -15, 7, -10, -1,  7,  -2,  2,  1,  -3, 0,  0 },
      { 1,  -8, 24, -3, 7,   -2, 2,  -1, -6, -51, -6, -4,  -5,  0, -1, 0,  38, -1, 0, 25, 6,  2,  1,  1,
        47, 20, 35, 1,  -27, 1,  -5, 0,  37, -37, -9, -47, -28, 5, 0,  18, 8,  6,  0, -8, -4, -3, -3, 1 },
      { 4, 10, 4,  17,  -9, 4,  -2, 1,  5,  14, 32, -15, 9,  -3, 2,   -1,  7,  13, 19,  15, -8, 1,   -1, 0,
        3, 25, 30, -18, 1,  -2, 0,  -1, 11, 24, 22, -11, -3, 37, -13, -58, -5, 12, -63, 26, 9,  -15, 11, 8 },
      { -3, -9, -23, 10,  -10, 3, -3, 1, -5, -14, -16, -27, 13,  -5,  2,   -1, -1, -13, -30, 11, -5, 2,   -1, 0,
        -5, -8, -22, -16, 10,  0, 1,  0, 0,  -29, -27, 6,   -27, -10, -30, 9,  -3, -10, -7,  77, 9,  -13, 45, -8 },
      { 2,   11, 22,  2, 9,   -2, 2,  0, -6,  -7,  20, -32, -3, -4, 0, -1, 13, -5,  -28, 6,   18, -4, 3, -1,
        -26, 27, -14, 6, -20, 0,  -2, 0, -76, -26, -4, -7,  12, 51, 5, 24, 7,  -17, -16, -12, -5, 4,  2, 13 },
      { 2,  -3, 8,  14, -5,  3, -1, 1, -2, -11, 5,  -18, 8,  -3,  2,  -1,  12,  -23, -19, 22, 2, 0,  1,  0,
        23, 41, -7, 35, -10, 4, -1, 1, 5,  7,   23, 5,   69, -38, -8, -32, -15, -31, 24,  11, 2, 18, 11, -15 },
    } },
  { // 2
    {
      { -121, 33, 4, 4, 1, 2, 0, 1, -1, -1, 1, 0, 0, 0,  0, 0, 24, -5, -1, -1, 0, 0, 0, 0,
        5,    -1, 0, 0, 0, 0, 0, 0, 3,  -1, 0, 0, 2, -1, 0, 0, 2,  -1, 0,  0,  1, 0, 0, 0 },
      { 0,   -2, 0, 0, 0, 0, 0, 0, 121, -23, -7, -3, -2, -1, -1, 0, 17, 1, -2, 0, 0,  0, 0, 0,
        -27, 4,  2, 0, 0, 0, 0, 0, -12, 2,   1,  0,  -5, 1,  0,  0, -1, 0, 0,  0, -2, 0, 0, 0 },
      { -20, 19, -5, 2, -1, 1, 0, 0, 16, 3,  -2, 0, 0, 0,  0,  0, -120, 14, 8, 1, 3, 1, 1, 0,
        -18, -2, 3,  0, 1,  0, 0, 0, 17, -3, -1, 0, 6, -1, -1, 0, 2,    0,  0, 0, 2, 0, 0, 0 },
      { 32, 108, -43, 10, -9, 3, -3, 1, 4,  19, -7, 1, -1, 0,  0, 0, 11, -30, 9, -2, 1, -1, 0, 0,
        0,  -8,  2,   0,  0,  0, 0,  0, -7, -1, 2,  0, -3, -1, 1, 0, -2, -2,  1, 0,  0, 0,  0, 0 },
      { -3,   0,  -1, 0, 0, 0, 0, 0, -29, 11, -2, 1, 0,  0,  0,  0, 12, 7, -1, 0, 0, 0, 0, 0,
        -117, 12, 9,  1, 3, 0, 1, 0, -32, -3, 3,  0, 12, -2, -1, 0, 7,  0, 0,  0, 1, 0, 0, 0 },
      { -4, -12, -3, 1,  -1, 0, 0, 0, 19, 105, -31, 7, -6, 1,  -2, 0, 9, 46, -6, 0, 0, 0,  0, 0,
        8,  -29, 9,  -3, 1,  0, 0, 0, -3, -19, 3,   0, -4, -6, 1,  0, 0, 0,  0,  0, 0, -1, 0, 0 },
      { 7,   1,  2, 0, 0, 0, 0, 0, 4,   3,   -2, 0, 0,  0, 0,  0, 22, -8, 1,  -1, 0,  0, 0, 0,
        -28, -9, 4, 0, 1, 0, 0, 0, 117, -10, -8, 0, 32, 1, -4, 0, 3,  1,  -1, 0,  -3, 1, 0, 0 },
      { -8, -31, 14, -4, 3, -1, 1, 0, 9,  43, 0,  1, -1, 0, 0, 0, -13, -105, 17, -2, 2, 0, 0,  0,
        -8, -25, -3, 0,  0, 0,  0, 0, -7, 32, -5, 1, -1, 4, 0, 0, 2,   -1,   0,  0,  1, 0, -1, 0 },
      { -15, -43, -100, 23, -12, 6,  -4, 2, -6, -17, -48, 10, -5, 2, -1, 1, 1,  -5, 19, -6, 3,  -1, 1, 0,
        2,   7,   15,   -3, 1,   -1, 0,  0, 4,  10,  5,   -1, 0,  3, 1,  0, -2, 1,  2,  0,  -1, 1,  1, 0 },
      { -3,  1, 2,  0, 0, 0, 0, 0, -6, 3,  1,  0, 0,    0, 0,  0, 0,   3,  -2, 0, 0,  0,  0, 0,
        -20, 8, -2, 0, 0, 0, 0, 0, 30, 13, -3, 0, -116, 6, 10, 0, -35, -5, 4,  0, -3, -1, 0, 0 },
      { -1, -6,   -3, 2,  -1, 0, 0, 0, -6,  -35, 9, 0, 2,   0, 0,  0, 1,  -6, 11, -2, 2, 0, 1,  0,
        -9, -100, 17, -1, 1,  0, 0, 0, -10, -63, 1, 2, -17, 3, -4, 0, -1, 9,  -1, 0,  3, 4, -1, 0 },
      { -5, -14, -48, 2, -5, 1, -2, 0, 10, 24, 99, -17, 10, -4, 3,  -1, 4, 14, 32, 0, 2, 0,  1,  0,
        -4, 0,   -39, 6, -4, 1, -1, 0, 2,  -3, -4, 0,   2,  -2, -2, 0,  0, 0,  -1, 0, 0, -1, -1, 0 },
      { -2, 0,  2, 0, 0, 0, 0, 0, -2, 0,  1,  0, 0,  0, 0,  0, -1,   -1, 1, -1, 0,   0,  0, 0,
        -1, -4, 2, 0, 0, 0, 0, 0, -8, -2, -1, 1, 30, 4, -4, 1, -102, 4,  8, -1, -69, -2, 6, -1 },
      { -2, -10, -4, 0, 0, 0, 0, 0, 3, 11,  -1, -1, 0,   0,   0,  0, -6, -40, -15, 6, -2, 1, 0, 0,
        5,  57,  -6, 2, 0, 0, 0, 0, 1, -95, 18, -6, -10, -34, -2, 0, -4, 17,  -2,  0, 0,  2, 1, 0 },
      { -2, -3,  -25, -2, -3, 0,  -1, 0,  -1, -3, -1, 4,  -2, 2, 0,  1,  -7, -8, -97, 17, -9, 3, -3, 1,
        -8, -26, -61, -1, -3, -1, -1, -1, 2,  10, 24, -7, 5,  9, 19, -1, 0,  1,  4,   0,  -2, 0, 1,  0 },
      { 4,  -4, 28,  103, -42, 24, -9, 7, 1,  2,  4,  0, 3, -1, 0, 0,  -1, 0, -9, -42, 17, -9, 3, -2,
        -1, 1,  -14, 6,   -4,  2,  -1, 0, -1, -2, -4, 4, 0, 3,  1, -1, 0,  2, 0,  -2,  2,  0,  0, 0 },
    },
    {
      { 87, -41, 3, -4, 1, -1, 0, -1, -73, 28, 2,  1, 1,  1,  0, 0, 30, -5, -6, 1, -1, 0, 0, 0,
        -8, -3,  3, 0,  0, 0,  0, 0,  3,   2,  -1, 0, -2, -1, 0, 0, 1,  1,  0,  0, -1, 0, 0, 0 },
      { -75, 4, 7, 0,  2, 0, 1, 0, -41, 36, -7, 3, -1, 1,  0, 0, 72, -29, -2, 0, -1, 0, -1, 0,
        -37, 6, 7, -2, 1, 0, 0, 0, 12,  3,  -4, 0, -3, -2, 1, 0, 4,  0,   0,  0, -1, 0, 0,  0 },
      { 26,  -44, 22, -6, 4, -2, 1, -1, 77, 24, -22, 2, -4,  0, -1, 0,  7, -38, 10, 0, 1,  0,  0, 0,
        -51, 27,  4,  -3, 2, -1, 1, 0,  31, -5, -8,  3, -14, 0, 5,  -1, 6, 1,   -3, 0, -4, -1, 1, 0 },
      { -39, -68, 37, -7, 6,  -2, 2, 0, -9,  56, -21, 1, -2, 0, -1, 0, -45, 4, -3, 6, -1, 2, 0, 1,
        49,  -13, 3,  -3, -1, 0,  0, 0, -19, 2,  0,   0, 5,  1, 1,  0, -2,  0, -1, 0, 1,  0, 0, 0 },
      { 10, -20, 2,  0, 1, 0, 0, 0, 50,  -1, 8, -5, 1,  -1, 0,   0, 66,  17, -24, 4, -3, 1, -1, 0,
        13, -49, 15, 1, 0, 0, 0, 0, -53, 34, 6, -5, 30, -7, -11, 3, -11, -2, 5,   1, 4,  2, -1, -1 },
      { -21, -45, 8,  -2, 3,  -1, 1, 0, -7, -30, 26, -8, 3,   -1, 1,  -1, -9, 69, -33, 5, -2, 0,  -1, 0,
        -44, -31, 10, 7,  -2, 2,  0, 1, 49, 7,   2,  -6, -23, -3, -2, 2,  9,  4,  0,   0, -2, -1, -1, 0 },
      { -4,  -2, -55, 28, -8, 5, -3, 2, -2,  37, 43, -19, 1,  -2,  1,  -1, -47, -34, -27, 5,  4, -1, 1,  0,
        -39, -2, 27,  4,  -2, 1, 0,  0, -11, 32, -8, -7,  27, -12, -6, 6,  -13, 0,   4,   -3, 3, -1, -2, 1 },
      { 2,   19,  47, -23, 6, -4, 2, -1, -23, -22, -44, 17, -2, 2,   -1, 0,  -33, 3,  22, -2, -4, 1, -1, 0,
        -58, -17, 6,  -6,  7, -1, 1, 0,  -23, 40,  -2,  5,  43, -11, -8, -1, -18, -4, 5,  2,  4,  3, 0,  -1 },
      { -19, -62, -9,  3, 0,  0, 0, 0, -12, -56, 27, -7, 3,  -1, 1, 0,  7,   -8, 16, -6, 4, -2, 1, -1,
        -15, 54,  -23, 2, -1, 0, 0, 0, -42, -25, 4,  6,  34, 8,  2, -2, -15, -1, 0,  -1, 3, 2,  0, 1 },
      { 1,   9,   -5,  0, -1, 0, 0, 0, 0,   22,  -1, 2,  0,   1,  0,  0,  -13, 17, 0,  -2, 0,   -1, 0, 0,
        -46, -10, -10, 4, -1, 1, 0, 0, -80, -27, 20, -4, -66, 23, -2, -2, 20,  -3, -2, 3,  -14, 2,  3, -1 },
      { 5,   17, -9,  0, -2, 1, 0,  0, 13, 54,  -2, 7, -1, 1,  0,  0,  4,   51, -3, -6, -1, -1, 0, 0,
        -20, 6,  -34, 9, -2, 2, -1, 0, 16, -52, 28, 1, 59, 15, -8, -5, -28, -7, 2,  2,  10, 3,  0, -1 },
      { 7, 27, 56, -2, 10, -3, 3,  -1, -2,  -6,  8,   -28, 3, -4, 1, -1, -1, -4, -68, 35, -5, 5,  -2, 1,
        0, 35, 43, -4, -6, 1,  -1, 0,  -14, -38, -12, -10, 9, 5,  7, 6,  -9, 7,  -4,  -3, 4,  -4, 0,  3 },
      { 0, 0,  19, -4, 3,  -2, 2,  -1, -3, -13, 10, -4,  1,  0,  0,   0, -6, -37, -18, -5, 2,   -2, 1, -1,
        6, -6, -7, 25, -6, 4,  -1, 1,  16, 10,  55, -24, 15, 46, -52, 1, 35, -43, 10,  12, -23, 13, 5, -8 },
      { -3, 0, -27, -80, 40, -16, 6, -4, 4,  3,  31, 61, -22, 7, -1, 1,  -4, -7, -26, -6, -10, 6, -4, 1,
        3,  8, 14,  -18, 15, -5,  2, -1, -2, -4, -1, 13, 0,   2, -4, -3, 3,  -1, 2,   1,  -2,  0, -2, -1 },
      { 1,  2,  -8, 6,   -1, 1,  0, 0, 2,  8,  -5,  -1, 0,  0,   0,  0, 1,  24, 3,   5,  -1,  1,  0, 0,
        -3, 12, 6,  -10, 1,  -1, 0, 0, -9, -1, -25, 10, 45, -11, 18, 2, 86, 1,  -13, -4, -65, -6, 7, 2 },
      { -4, -18, -57, 8,   -8, 1,  -3, 0, -5, -20, -69, 7,  -6, 2,  -2,  1, 1,  4,   0, 33, -7, 5, -2, 1,
        0,  -9,  53,  -22, 3,  -1, 0,  0, 4,  -27, -2,  -9, 5,  36, -13, 5, -7, -17, 1, 2,  4,  6, 4,  -1 },
    } },
  { // 3
    {
      { -115, 37, 9,  2,  2, 1, 1, 0, 10, -29, 8, 0,  1, 0, 1, 0, 23, -8, -8, 1, -1, 0, 0, 0,
        3,    3,  -2, -1, 0, 0, 0, 0, 4,  0,   0, -1, 1, 1, 0, 0, 2,  0,  0,  0, 0,  0, 0, 0 },
      { 15, 51, -18, 0, -3, 0, -1, 0, -95, 7,  34, -3, 5, -1, 2,  0, 23, -47, 1, 6, 0, 1, 0,  1,
        8,  5,  -12, 0, -1, 0, 0,  0, 3,   -3, 1,  -1, 2, 1,  -2, 0, 1,  -1,  0, 0, 1, 1, -1, 0 },
      { 29,  -22, 16, -6,  3, -2, 1, -1, -4, -80, 12, 15, 0,  3, 0, 1,  45, 7, -59, 7, -2, 1, -1, 0,
        -15, 41,  -3, -16, 2, -3, 0, -1, 1,  0,   7,  -2, -3, 6, 1, -2, 0,  0, 1,   0, -1, 2, 0,  -1 },
      { -36, -98, 25,  5, 4,  1, 2, 1, -59, 11, -17, 1,  1, 1, 0, 0, 6, -13, 7, -3, 0, 0, 0, 0,
        14,  -4,  -14, 3, -1, 0, 0, 0, 2,   8,  -3,  -5, 2, 0, 0, 0, 0, 3,   0, -1, 1, 0, 0, 0 },
      { -6,  18,  3,  -3, -1,  0, 0,  0, -50, -5,  -38, 12, 0,  2, 0, 1,  3, 67, -7, -40, 3,  -6, 1, -3,
        -12, -13, 65, -3, -10, 0, -1, 0, 9,   -20, -5,  22, -2, 0, 0, -1, 2, -3, -2, 3,   -1, 0,  1, 0 },
      { 4,  15,  52, -13, 5, -3, 2, -1, -17, -45, 16,  24, -2, 4,  -1, 2,  -87, -8, -14, 7, 8, 1, 2, 0,
        23, -35, -6, -3,  1, 1,  0, 0,  2,   5,   -17, 0,  3,  -1, -1, -5, 0,   1,  -4,  0, 1, 0, 0, -2 },
      { -20, -7, -43, 4,   0, 1,  -1, 1,  -7, 35,  0,  12, -4, 1,  -1, 0, -51, -2, -57, 5, 15, 0,  4,  0,
        7,   39, 5,   -55, 1, -7, 1,  -3, 1,  -10, 41, 2,  4,  -3, -2, 3, -1,  -2, 7,   1, 1,  -1, -1, 0 },
      { 4,   29, 1,   26, -5, 4,  -2, 1, -17, -7, -73, 6,   6, 2,  1,  1, -5, 21, -3, 5,  -1, -3, 0, -1,
        -11, 2,  -52, -3, 27, -2, 5,  0, 0,   27, 8,   -58, 2, -5, 25, 3, 0,  3,  0,  -5, 0,  -2, 7, 0 },
      { 12, 13, 10, 2,  -1,  3, -1, 1, 17,  -2, -46, 12, 7, 0, 2, 0,  16, -45, -9, -53, 6, 1, 1, 0,
        70, 16, 8,  -4, -37, 1, -7, 0, -12, 29, 3,   21, 4, 0, 5, -1, -3, 4,   1,  4,   2, 0, 1, 0 },
      { 5,   20, 90, -17, 4, -3, 2, -1, 6, 66, 8,  28, -7, 3,  -1, 1, 29, 5,  -19, 12, 9, -1, 1, 0,
        -10, 14, -1, -13, 7, 0,  1, 0,  0, -6, 13, -4, 0,  -4, 1,  5, 0,  -1, -1,  1,  0, -1, 0, 0 },
      { -3, -4,  -34, -12, 2, -1, -1, 0, 5,  25, 11,  43, -10, 4,  -2, 1,   23, 20, -40, 12, 21, -3, 4, -1,
        25, -28, -10, 5,   8, 6,  0,  2, -4, 21, -64, -8, -5,  19, 10, -48, 3,  -1, 10,  -3, 0,  4,  3, -6 },
      { -1,  -3,  2, 19, -2,  4, -1, 2, 9, 3,   -35, 22, 11, 1, 2,   0,   -7, -65, -19, -22, 11, 4, 2,  1,
        -75, -18, 3, -1, -10, 2, 0,  1, 2, -35, -27, 4,  1,  8, -17, -19, 3,  0,   3,   -6,  0,  2, -1, -2 },
      { 10, -4,  -6, 12,  5,  1, 1, 0, 11, -9,  -12, -2, -7, 0,  -1,  0,  33, -10, -4,  18, 18, -4, 4,  -1,
        28, -72, 1,  -49, 15, 2, 2, 1, 56, -23, 22,  -1, 4,  -1, -15, 26, 6,  4,   -10, 0,  0,  2,  -3, 2 },
      { 4,  6,  14, 53, -4, 4,  0, 2,  0,   -1,  -20, -13, 3, 2,  -1,  1,   -3, 1, -5, 35,  -16, -6, -1, -2,
        46, 29, 13, 21, 37, -5, 4, -1, -10, -53, -18, 8,   9, 12, -41, -25, -2, 2, 13, -16, 4,   1,  -5, 1 },
      { 2,   9,  13,  37,  19,  6, 2,  2, -9,  -3, -9, -28, -20, -4, -3,  -1,  1, 18, 9,  28,  24, 6,  2,  2,
        -20, -5, -25, -33, -36, 9, -2, 2, -13, 42, 1,  57,  -22, -2, -25, -28, 5, 6,  19, -12, -5, -3, -2, 4 },
      { 3, -3,  12, 84, -12, 8,  -2, 3,  6,  13, 50, -1,  45, 1, 7,  0, -2, 18, -22, -37, -13, 14, 0, 3,
        1, -12, -3, 2,  -15, -8, 1,  -1, 19, 14, -4, -12, -4, 5, 17, 8, 2,  -4, -4,  4,   -2,  2,  1, 0 },
    },
    {
      { 109, -26, -8, -3, -2, -1, -1, 0, -50, 28, 2, 1,  0, 0, 0, 0, -18, -8, 6, 0, 1, 0, 1, 0,
        6,   -2,  -3, 0,  0,  0,  0,  0, -3,  2,  1, -1, 0, 0, 0, 0, -2,  0,  0, 0, 0, 0, 0, 0 },
      { -39, 31, -5,  2, -1, 1, 0,  0, -95, 6, 18, 0,  4, 0, 1,  0,  32, -49, 5, 1, 1, 0, 0, 0,
        27,  -1, -14, 2, -2, 1, -1, 0, 3,   5, -3, -2, 4, 1, -1, -1, 2,  0,   0, 0, 2, 0, 0, 0 },
      { 29,  -3, -2, -2, 0, 0,  0, 0,  0,   -41, 9,  0, 2,  0,  1, 0, 86, 4,  -33, 2, -6, 1, -2, 0,
        -32, 58, 1,  -7, 0, -2, 0, -1, -14, -8,  20, 0, -2, -3, 0, 4, -1, -1, 0,   0, -1, 1, 0,  0 },
      { 18,  96, -23, 2,  -5, 1,  -2, 0, -10, 6,   10, -2, 1, -1, 1,   0, -14, 26, 2,  -4, 1, -1, 0,  0,
        -43, -9, 35,  -2, 4,  -1, 1,  0, 14,  -40, 1,  10, 2, 1,  -10, 1, 2,   -4, -1, -1, 0, 0,  -1, 0 },
      { -29, -60, 16, -2, 3, -1, 1, 0, -52, 9,   -17, 5,  -2, 1, -1,  1,  13, 56, -2, -9, 0, -2, 0,  -1,
        -34, -18, 41, 0,  3, 0,  1, 0, 19,  -36, -10, 13, 3,  6, -14, -1, 3,  1,  -1, -3, 1, 1,  -1, -1 },
      { -23, -5, -15, 5,   -2, 1,  -1, 1,  2,   79,  -13, -4, -2, -1,  -1, 0,  -9, 1, 5,   -1, 1, 0,  0, 0,
        -4,  49, 2,   -14, 1,  -3, 0,  -1, -31, -14, 56,  -1, 13, -37, -4, 20, -2, 2, -10, 0,  2, -4, 0, -1 },
      { -7, -3, 12, -3,  3, -1, 1, 0,  -31, -62, 8,  7,  0, 2,   0,  1,  -75, 9, -45, 5,  -1, 1, -1, 0,
        14, 35, 0,  -23, 2, -5, 1, -2, 1,   -8,  32, -1, 7, -12, -4, 10, 0,   2, -6,  -1, 2,  0, 0,  -2 },
      { 1,   -26, 5, 0, 1,  0, 1, 0, 24, -3,  43, -6, 4,  -2, 1,   -1, -7, -64, 9,  14,  0, 3, 0,  1,
        -12, -4,  5, 3, -1, 1, 0, 0, 8,  -59, -3, 26, 14, 6,  -58, 6,  -5, 17,  -7, -18, 3, 3, -1, -5 },
      { 11, 14, 6,  -3, 1,  -1, 1,  0, 10,  -7,  -9, 3,  -2, 1,  -1,  0, 22, 21, 1,  -21, 2, -4, 1, -2,
        92, 1,  53, 0,  -9, 1,  -2, 0, -21, -11, 1,  40, -5, -4, -24, 5, -4, 5,  -6, -5,  0, 0,  0, -3 },
      { -10, -11, -47, 3,   -4, 1,  -1, 0,  5,  28, 11,  -2, -1, 0,  0, 0,   -12, -2,  -38, 2, 0, 1,  0,  0,
        16,  38,  11,  -16, -1, -3, 0,  -2, 12, -9, -22, 7,  -8, 60, 4, -36, -6,  -15, 54,  7, 3, -7, -8, 14 },
      { -8, -24, -99, 11, -10, 3, -4, 1, -5, -36, 19, -26, 4,  -5,  1,  -2, 0, 25, 41,  5,  -3, 1, 0, 0,
        10, -5,  -7,  12, 2,   1, 0,  0, -1, 1,   9,  -3,  -3, -14, -3, 12, 2, 4,  -13, -2, -1, 3, 2, -4 },
      { -5,  1,  -1, 0,  1,  0, 0, 0, -10, -14, -6,  8,  0,  1,   0, 0,   -17, -2, 7, -5, 3, -1, 0, 0,
        -16, 13, 3,  31, -1, 6, 0, 2, -93, -15, -46, -3, 23, -19, 0, -47, 8,   4,  8, 3,  2, 3,  0, 0 },
      { 1,  12, -20, 21, -4, 5, -2, 2, -5, -2, -75, 9, -1,  2,  -1,  1,  -1, -2, -16, -4,  0, -1, 0,  0,
        -7, 7,  -31, 0,  3,  0, 0,  0, 4,  11, -12, 4, -12, 14, -50, -1, -8, 32, -4,  -54, 2, 0,  30, -15 },
      { 2,   -9, -18, 8,  -3,  3, -1, 1, 3,  -25, -62, -6, 0,  -2, 0,  -1, -6, -61, 14, -51, 2, -6, 0,   -2,
        -19, 0,  40,  -7, -17, 0, -3, 0, 13, -4,  11,  9,  17, 0,  24, 5,  1,  -12, 4,  28,  0, 0,  -15, 8 },
      { 4,  9,  39,  18, 0,  2, 0, 1, -6, -16, -22, -37, 5, -5, 1,  -2, -5,  15, 63, 9, -16, 0,   -3, 0,
        18, 42, -18, 27, 15, 1, 3, 1, 12, -34, 9,   -24, 4, 28, -2, 4,  -11, -4, 30, 2, 5,   -13, -4, 18 },
      { -7,  -2, 15, -6, 1,   -1, 1,  -1, -11, -3, 22, -14, 0,   -2, 1,   -1, -18, -7,  30, -9,  -4, 0,   -1, 0,
        -35, 23, 23, 10, -17, 1,  -3, 0,  -19, 53, 6,  48,  -65, 12, -12, 11, -8,  -16, 10, -21, -2, -12, 6,  2 },
    } }
};

const int8_t g_lfnst4x4[4][2][16][16] = {
  { // 0
    {
      { 108, -44, -15, 1, -44, 19, 7, -1, -11, 6, 2, -1, 0, -1, -1, 0 },
      { -40, -97, 56, 12, -11, 29, -12, -3, 18, 18, -15, -3, -1, -3, 2, 1 },
      { 25, -31, -1, 7, 100, -16, -29, 1, -54, 21, 14, -4, -7, 2, 4, 0 },
      { -32, -39, -92, 51, -6, -16, 36, -8, 3, 22, 18, -15, 4, 1, -5, 2 },
      { 8, -9, 33, -8, -16, -102, 36, 23, -4, 38, -27, -5, 5, 16, -8, -6 },
      { -25, 5, 16, -3, -38, 14, 11, -3, -97, 7, 26, 1, 55, -10, -19, 3 },
      { 8, 9, 16, 1, 37, 36, 94, -38, -7, 3, -47, 11, -6, -13, -17, 10 },
      { 2, 34, -5, 1, -7, 24, -25, -3, 8, 99, -28, -29, 6, -43, 21, 11 },
      { -16, -27, -39, -109, 6, 10, 16, 24, 3, 19, 10, 24, -4, -7, -2, -3 },
      { -9, -10, -34, 4, -9, -5, -29, 5, -33, -26, -96, 33, 14, 4, 39, -14 },
      { -13, 1, 4, -9, -30, -17, -3, -64, -35, 11, 17, 19, -86, 6, 36, 14 },
      { 8, -7, -5, -15, 7, -30, -28, -87, 31, 4, 4, 33, 61, -5, -17, 22 },
      { -2, 13, -6, -4, -2, 28, -13, -14, -3, 37, -15, -3, -2, 107, -36, -24 },
      { 4, 9, 11, 31, 4, 9, 16, 19, 12, 33, 32, 94, 12, 0, 34, -45 },
      { 2, -2, 8, -16, 8, 5, 28, -17, 6, -7, 18, -45, 40, 36, 97, -8 },
      { 0, -2, 0, -10, -1, -7, -3, -35, -1, -7, -2, -32, -6, -33, -16, -112 },
    },
    {
      { 119, -30, -22, -3, -23, -2, 3, 2, -16, 3, 6, 0, -3, 2, 1, 0 },
      { -27, -101, 31, 17, -47, 2, 22, 3, 19, 30, -7, -9, 5, 3, -5, -1 },
      { 0, 58, 22, -15, -102, 2, 38, 2, 10, -13, -5, 4, 14, -1, -9, 0 },
      { 23, 4, 66, -11, 22, 89, -2, -26, 13, -8, -38, -1, -9, -20, -2, 8 },
      { -19, -5, -89, 2, -26, 76, -11, -17, 20, 13, 18, -4, 1, -15, 3, 5 },
      { -10, -1, -1, 6, 23, 25, 87, -7, -74, 4, 39, -5, 0, -1, -20, -1 },
      { -17, -28, 12, -8, -32, 14, -53, -6, -68, -67, 17, 29, 2, 6, 25, 4 },
      { 1, -24, -23, 1, 17, -7, 52, 9, 50, -92, -15, 27, -15, -10, -6, 3 },
      { -6, -17, -2, -111, 7, -17, 8, -42, 9, 18, 16, 25, -4, 2, -1, 11 },
      { 9, 5, 35, 0, 6, 21, -9, 34, 44, -3, 102, 11, -7, 13, 11, -20 },
      { 4, -5, -5, -10, 15, 19, -2, 6, 6, -12, -13, 6, 95, 69, -29, -24 },
      { -6, -4, -9, -39, 1, 22, 0, 102, -19, 19, -32, 30, -16, -14, -8, -23 },
      { 4, -4, 7, 8, 4, -13, -18, 5, 0, 0, 21, 22, 58, -88, -54, 28 },
      { -4, -7, 0, -24, -7, 0, -25, 3, -3, -30, 8, -76, -34, 4, -80, -26 },
      { 0, 6, 0, 30, -6, 1, -13, -23, 1, 20, -2, 80, -44, 37, -68, 1 },
      { 0, 0, -1, 5, -1, -7, 1, -34, -2, 3, -6, 19, 5, -38, 11, -115 },
    } },
  { // 1
    {
      { -111, 39, 4, 3, 44, 11, -12, -1, 7, -16, -5, 2, 3, -1, 4, 2 },
      { -47, -27, 15, -1, -92, 43, 20, -2, 20, 39, -16, -5, 10, -5, -13, 2 },
      { -35, -23, 4, 4, -17, -72, 32, 6, -59, 18, 50, -6, 0, 40, 0, -13 },
      { 13, 93, -27, -4, -48, 13, -34, 4, -52, 11, 1, 10, 3, 16, -3, 1 },
      { -11, -27, 1, 2, -47, -4, -36, 10, -2, -85, 14, 29, -20, -2, 57, 4 },
      { 0, -35, 32, -2, 26, 60, -3, -17, -82, 1, -30, 0, -37, 21, 3, 12 },
      { -17, -46, -92, 14, 7, -10, -39, 29, -17, 27, -28, 17, 1, -15, -13, 17 },
      { 4, -10, -23, 4, 16, 58, -17, 26, 30, 21, 67, 2, -13, 59, 13, -40 },
      { 5, -20, 32, -5, 8, -3, -46, -7, -4, 2, -15, 24, 100, 44, 0, 5 },
      { -4, -1, 38, -18, -7, -42, -63, -6, 33, 34, -23, 15, -65, 33, -20, 2 },
      { -2, -10, 35, -19, 5, 8, -44, 14, -25, 25, 58, 17, 7, -84, -16, -18 },
      { 5, 13, 18, 34, 11, -4, 18, 18, 5, 58, -3, 42, -2, -10, 85, 38 },
      { -5, -7, -34, -83, 2, -1, -4, -73, 4, 20, 15, -12, 4, -3, 44, 12 },
      { 0, 4, -2, -60, 5, 9, 42, 34, 5, -14, 9, 80, -5, 13, -38, 37 },
      { -1, 2, 7, -57, 3, -7, 9, 68, -9, 6, -49, -20, 6, -4, 36, -64 },
      { -1, 0, -12, 23, 1, -4, 17, -53, -3, 4, -21, 72, -4, -8, -3, -83 },
    },
    {
      { 88, -55, 6, -3, -66, 27, 9, -2, 11, 11, -13, 1, -2, -7, 1, 2 },
      { -58, -20, 27, -2, -27, 75, -29, 0, 47, -42, -11, 11, -9, -3, 19, -4 },
      { -51, 23, -22, 5, -63, 3, 37, -5, 1, 64, -35, -4, 29, -31, -11, 13 },
      { -27, -76, 49, -2, 40, 14, 9, -17, -56, 36, -25, 6, 14, 3, -6, 8 },
      { 19, -4, -36, 22, 52, 7, 36, -23, 28, -17, -64, 15, -5, -44, 48, 9 },
      { 29, 50, 13, -10, 1, 34, -59, 1, -51, 4, -16, 30, 52, -33, 24, -5 },
      { -12, -21, -74, 43, -13, 39, 18, -5, -58, -35, 27, -5, 19, 26, 6, -5 },
      { 19, 38, -10, -5, 28, 66, 0, -5, -4, 19, -30, -26, -40, 28, -60, 37 },
      { -6, 27, 18, -5, -37, -18, 12, -25, -44, -10, -38, 37, -66, 45, 40, -7 },
      { -13, -28, -45, -39, 0, -5, -39, 69, -23, 16, -12, -18, -50, -31, 24, 13 },
      { -1, 8, 24, -51, -15, -9, 44, 10, -28, -70, -12, -39, 24, -18, -4, 51 },
      { -8, -22, -17, 33, -18, -45, -57, -27, 0, -31, -30, 29, -2, -13, -53, 49 },
      { 1, 12, 32, 51, -8, 8, -2, -31, -22, 4, 46, -39, -49, -67, 14, 17 },
      { 4, 5, 24, 60, -5, -14, -23, 38, 9, 8, -34, -59, 24, 47, 42, 28 },
      { -1, -5, -20, -34, 4, 4, -15, -46, 18, 31, 42, 10, 10, 27, 49, 78 },
      { -3, -7, -22, -34, -5, -11, -36, -69, -1, -3, -25, -73, 5, 4, 4, -49 },
    } },
  { // 2
    {
      { -112, 47, -2, 2, -34, 13, 2, 0, 15, -7, 1, 0, 8, -3, -1, 0 },
      { 29, -7, 1, -1, -108, 40, 2, 0, -45, 13, 4, -1, 8, -5, 1, 0 },
      { -36, -87, 69, -10, -17, -33, 26, -2, 7, 14, -11, 2, 6, 8, -7, 0 },
      { 28, -5, 2, -2, -29, 13, -2, 0, 103, -36, -4, 1, 48, -16, -4, 1 },
      { -12, -24, 15, -3, 26, 80, -61, 9, 15, 54, -36, 2, 0, -4, 6, -2 },
      { 18, 53, 69, -74, 14, 24, 28, -30, -6, -7, -11, 12, -5, -7, -6, 8 },
      { 5, -1, 2, 0, -26, 6, 0, 1, 45, -9, -1, 0, -113, 28, 8, -1 },
      { -13, -32, 18, -2, 15, 34, -27, 7, -25, -80, 47, -1, -16, -50, 28, 2 },
      { -4, -13, -10, 19, 18, 46, 60, -48, 16, 33, 60, -48, 1, 0, 5, -2 },
      { 15, 33, 63, 89, 8, 15, 25, 40, -4, -8, -15, -8, -2, -6, -9, -7 },
      { -8, -24, -27, 15, 12, 41, 26, -29, -17, -50, -39, 27, 0, 35, -67, 26 },
      { -2, -6, -24, 13, -1, -8, 37, -22, 3, 18, -51, 22, -23, -95, 17, 17 },
      { -3, -7, -16, -21, 10, 24, 46, 75, 8, 20, 38, 72, 1, 2, 1, 7 },
      { 2, 6, 10, -3, -5, -16, -31, 12, 7, 24, 41, -16, -16, -41, -89, 49 },
      { 4, 8, 21, 40, -4, -11, -28, -57, 5, 14, 31, 70, 7, 18, 32, 52 },
      { 0, 1, 4, 11, -2, -4, -13, -34, 3, 7, 20, 47, -6, -19, -42, -101 },
    },
    {
      { -99, 39, -1, 2, 65, -20, -5, 0, -15, -2, 5, -1, 0, 3, -1, 0 },
      { 58, 42, -33, 3, 33, -63, 23, -1, -55, 32, 3, -5, 21, -2, -8, 3 },
      { -15, 71, -44, 5, -58, -29, 25, 3, 62, -7, -4, -4, -19, 4, 0, 1 },
      { 46, 5, 4, -6, 71, -12, -15, 5, 52, -38, 13, -2, -63, 23, 3, -3 },
      { -14, -54, -29, 29, 25, -9, 61, -29, 27, 44, -48, 5, -27, -21, 12, 7 },
      { -3, 3, 69, -42, -11, -50, -26, 26, 24, 63, -19, -5, -18, -22, 12, 0 },
      { 17, 16, -2, 1, 38, 18, -12, 0, 62, 1, -14, 5, 89, -42, 8, -2 },
      { 15, 54, -8, 6, 6, 60, -26, -8, -30, 17, -38, 22, -43, -45, 42, -7 },
      { -6, -17, -55, -28, 9, 30, -8, 58, 4, 34, 41, -52, -16, -36, -20, 16 },
      { -2, -1, -9, -79, 7, 11, 48, 44, -13, -34, -55, 6, 12, 23, 20, -11 },
      { 7, 29, 14, -6, 12, 53, 10, -11, 14, 59, -15, -3, 5, 71, -54, 13 },
      { -5, -24, -53, 15, -3, -15, -61, 26, 6, 30, -16, 23, 13, 56, 44, -35 },
      { 4, 8, 21, 52, -1, -1, -5, 29, -7, -17, -44, -84, 8, 20, 31, 39 },
      { -2, -11, -25, -4, -4, -21, -53, 2, -5, -26, -64, 19, -8, -19, -73, 39 },
      { -3, -5, -23, -57, -2, -4, -24, -75, 1, 3, 9, -25, 6, 15, 41, 61 },
      { 1, 1, 7, 18, 1, 2, 16, 47, 2, 5, 24, 67, 3, 9, 25, 88 },
    } },
  { // 3
    {
      { -114, 37, 3, 2, -22, -23, 14, 0, 21, -17, -5, 2, 5, 2, -4, -1 },
      { -19, -41, 19, -2, 85, -60, -11, 7, 17, 31, -34, 2, -11, 19, 2, -8 },
      { 36, -25, 18, -2, -42, -53, 35, 5, 46, -60, -25, 19, 8, 21, -33, -1 },
      { -27, -80, 44, -3, -58, 1, -29, 19, -41, 18, -12, -7, 12, -17, 7, -6 },
      { -11, -21, 37, -10, 44, -4, 47, -12, -37, -41, 58, 18, 10, -46, -16, 31 },
      { 15, 47, 10, -6, -16, -44, 42, 10, -80, 25, -40, 21, -23, -2, 3, -14 },
      { 13, 25, 79, -39, -13, 10, 31, -4, 49, 45, 12, -8, 3, -1, 43, 7 },
      { 16, 11, -26, 13, -13, -74, -20, -1, 5, -6, 29, -47, 26, -49, 54, 2 },
      { -8, -34, -26, 7, -26, -19, 29, -37, 1, 22, 46, -9, -81, 37, 14, 20 },
      { -6, -30, -42, -12, -3, 5, 57, -52, -2, 37, -12, 6, 74, 10, 6, -15 },
      { 5, 9, -6, 42, -15, -18, -9, 26, 15, 58, 14, 43, 23, -10, -37, 75 },
      { -5, -23, -23, 36, 3, 22, 36, 40, 27, -4, -16, 56, -25, -46, 56, -24 },
      { 1, 3, 23, 73, 8, 5, 34, 46, -12, 2, 35, -38, 26, 52, 2, -31 },
      { -3, -2, -21, -52, 1, -10, -17, 44, -19, -20, 30, 45, 27, 61, 49, 21 },
      { -2, -7, -33, -56, -4, -6, 21, 63, 15, 31, 32, -22, -10, -26, -52, -38 },
      { -5, -12, -18, -12, 8, 22, 38, 36, -5, -15, -51, -63, -5, 0, 15, 73 },
    },
    {
      { -102, 22, 7, 2, 66, -25, -6, -1, -15, 14, 1, -1, 2, -2, 1, 0 },
      { 12, 93, -27, -6, -27, -64, 36, 6, 13, 5, -23, 0, -2, 6, 5, -3 },
      { -59, -24, 17, 1, -62, -2, -3, 2, 83, -12, -17, -2, -24, 14, 7, -2 },
      { -33, 23, -36, 11, -21, 50, 35, -16, -23, -78, 16, 19, 22, 15, -30, -5 },
      { 0, -38, -81, 30, 27, 5, 51, -32, 24, 36, -16, 12, -24, -8, 9, 1 },
      { 28, 38, 8, -9, 62, 32, -13, 2, 51, -32, 15, 5, -66, 28, 0, -1 },
      { 11, -35, 21, -17, 30, -18, 31, 18, -11, -36, -80, 12, 16, 49, 13, -32 },
      { -13, 23, 22, -36, -12, 64, 39, 25, -19, 23, -36, 9, -30, -58, 33, -7 },
      { -9, -20, -55, -83, 3, -2, 1, 62, 8, 2, 27, -28, 7, 15, -11, 5 },
      { -6, 24, -38, 23, -8, 40, -49, 0, -7, 9, -25, -44, 23, 39, 70, -3 },
      { 12, 17, 17, 0, 32, 27, 21, 2, 67, 11, -6, -10, 89, -22, -12, 16 },
      { 2, -9, 8, 45, 7, -8, 27, 35, -9, -31, -17, -87, -23, -22, -19, 44 },
      { -1, -9, 28, -24, -1, -10, 49, -30, -8, -7, 40, 1, 4, 33, 65, 67 },
      { 5, -12, -24, -17, 13, -34, -32, -16, 14, -67, -7, 9, 7, -74, 49, 1 },
      { 2, -6, 11, 45, 3, -10, 33, 55, 8, -5, 59, 4, 7, -4, 44, -66 },
      { -1, 1, -14, 36, -1, 2, -20, 69, 0, 0, -15, 72, 3, 4, 5, 65 },
    } }
};

//--------------------------------------------------------------------------------------------------

class ScanGenerator
{
private:
  uint32_t m_line, m_column;
  const uint32_t m_blockWidth, m_blockHeight;
  const uint32_t m_stride;

public:
  ScanGenerator(uint32_t blockWidth, uint32_t blockHeight, uint32_t stride)
    : m_line(0), m_column(0), m_blockWidth(blockWidth), m_blockHeight(blockHeight), m_stride(stride)
  { }

  uint32_t GetCurrentX() const { return m_column; }
  uint32_t GetCurrentY() const { return m_line; }

  uint32_t GetNextIndex(uint32_t blockOffsetX, uint32_t blockOffsetY)
  {
    const uint32_t rtn = ((m_line + blockOffsetY) * m_stride) + m_column + blockOffsetX;

    if ((m_column == m_blockWidth - 1) || (m_line == 0)) //if we reach the end of a rank, go diagonally down to the next one
    {
      m_line += m_column + 1;
      m_column = 0;

      if (m_line >= m_blockHeight) //if that takes us outside the block, adjust so that we are back on the bottom row
      {
        m_column += m_line - (m_blockHeight - 1);
        m_line = m_blockHeight - 1;
      }
    }
    else
    {
      m_column++;
      m_line--;
    }

    return rtn;
  }
};

uint32_t const g_log2SbbSize[MAX_TU_SIZE_IDX][MAX_TU_SIZE_IDX][2] =
//===== luma/chroma =====
{
  { { 0,0 },{ 0,1 },{ 0,2 },{ 0,3 },{ 0,4 },{ 0,4 },{ 0,4 } },
  { { 1,0 },{ 1,1 },{ 1,1 },{ 1,3 },{ 1,3 },{ 1,3 },{ 1,3 } },
  { { 2,0 },{ 1,1 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 } },
  { { 3,0 },{ 3,1 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 } },
  { { 4,0 },{ 3,1 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 } },
  { { 4,0 },{ 3,1 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 } },
  { { 4,0 },{ 3,1 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 },{ 2,2 } }
};

// ---------------------------------------------------------------------------------------------------------------------

void ScanOrderRom::initScanOrderRom()
{
  const uint32_t maxSizeIdx = MAX_TU_SIZE_IDX;
  // initialize scan orders
  for (uint32_t blockHeightIdx = 0; blockHeightIdx < maxSizeIdx; blockHeightIdx++)
  {
    for (uint32_t blockWidthIdx = 0; blockWidthIdx < maxSizeIdx; blockWidthIdx++)
    {
      const uint32_t blockWidth  = 1<<blockWidthIdx;
      const uint32_t blockHeight = 1<<blockHeightIdx;
      const uint32_t totalValues = blockWidth * blockHeight;

      //--------------------------------------------------------------------------------------------------

      //non-grouped scan orders

      {
        ScanElement *           scan = new ScanElement[totalValues];

        m_scanOrder[SCAN_UNGROUPED][blockWidthIdx][blockHeightIdx] = scan;

        ScanGenerator fullBlockScan(blockWidth, blockHeight, blockWidth);

        for (uint32_t scanPosition = 0; scanPosition < totalValues; scanPosition++)
        {
          const int rasterPos = fullBlockScan.GetNextIndex( 0, 0 );
          const int posY      = rasterPos / blockWidth;
          const int posX      = rasterPos - ( posY * blockWidth );

          scan[scanPosition].idx = rasterPos;
          scan[scanPosition].x   = posX;
          scan[scanPosition].y   = posY;
        }
      }

      //--------------------------------------------------------------------------------------------------

      //grouped scan orders
      const uint32_t* log2Sbb        = g_log2SbbSize[Log2(blockWidth)][Log2(blockHeight)];
      const uint32_t  log2CGWidth    = log2Sbb[0];
      const uint32_t  log2CGHeight   = log2Sbb[1];

      const uint32_t  groupWidth     = 1 << log2CGWidth;
      const uint32_t  groupHeight    = 1 << log2CGHeight;
      const uint32_t  widthInGroups = std::min<unsigned>(JVET_C0024_ZERO_OUT_TH, blockWidth) >> log2CGWidth;
      const uint32_t  heightInGroups = std::min<unsigned>(JVET_C0024_ZERO_OUT_TH, blockHeight) >> log2CGHeight;

      const uint32_t  groupSize      = groupWidth    * groupHeight;
      const uint32_t  totalGroups    = widthInGroups * heightInGroups;

      //for (uint32_t scanTypeIndex = 0; scanTypeIndex < SCAN_NUMBER_OF_TYPES; scanTypeIndex++)
      {
        ScanElement *scan = new ScanElement[totalValues];

        m_scanOrder[SCAN_GROUPED_4x4][blockWidthIdx][blockHeightIdx] = scan;

        if ( blockWidth > JVET_C0024_ZERO_OUT_TH || blockHeight > JVET_C0024_ZERO_OUT_TH )
        {
          for (uint32_t i = 0; i < totalValues; i++)
          {
            scan[i].idx = totalValues - 1;
            scan[i].x   = blockWidth - 1;
            scan[i].y   = blockHeight - 1;
          }
        }

        ScanGenerator fullBlockScan(widthInGroups, heightInGroups, groupWidth);

        for (uint32_t groupIndex = 0; groupIndex < totalGroups; groupIndex++)
        {
          const uint32_t groupPositionY  = fullBlockScan.GetCurrentY();
          const uint32_t groupPositionX  = fullBlockScan.GetCurrentX();
          const uint32_t groupOffsetX    = groupPositionX * groupWidth;
          const uint32_t groupOffsetY    = groupPositionY * groupHeight;
          const uint32_t groupOffsetScan = groupIndex     * groupSize;

          ScanGenerator groupScan(groupWidth, groupHeight, blockWidth);

          for (uint32_t scanPosition = 0; scanPosition < groupSize; scanPosition++)
          {
            const int rasterPos = groupScan.GetNextIndex( groupOffsetX, groupOffsetY );
            const int posY      = rasterPos / blockWidth;
            const int posX      = rasterPos - ( posY * blockWidth );

            scan[groupOffsetScan + scanPosition].idx = rasterPos;
            scan[groupOffsetScan + scanPosition].x   = posX;
            scan[groupOffsetScan + scanPosition].y   = posY;
          }

          fullBlockScan.GetNextIndex(0, 0);
        }
      }

      for (int i = 0; i < 64; i++)
      {
        g_coefTopLeftDiagScan8x8[blockWidthIdx][i].idx = g_auiXYDiagScan8x8[i][0] + g_auiXYDiagScan8x8[i][1] * blockWidth;
        g_coefTopLeftDiagScan8x8[blockWidthIdx][i].x   = g_auiXYDiagScan8x8[i][0];
        g_coefTopLeftDiagScan8x8[blockWidthIdx][i].y   = g_auiXYDiagScan8x8[i][1];
      }
      //--------------------------------------------------------------------------------------------------
    }
  }

  initGeoTemplate();
}

void ScanOrderRom::destroyScanOrderRom()
{
  unsigned numWidths  = MAX_TU_SIZE_IDX;
  unsigned numHeights = MAX_TU_SIZE_IDX;

  for (uint32_t groupTypeIndex = 0; groupTypeIndex < SCAN_NUMBER_OF_GROUP_TYPES; groupTypeIndex++)
  {
    for (uint32_t blockWidthIdx = 0; blockWidthIdx <= numWidths; blockWidthIdx++)
    {
      for (uint32_t blockHeightIdx = 0; blockHeightIdx <= numHeights; blockHeightIdx++)
      {
        delete[] m_scanOrder[groupTypeIndex][blockWidthIdx][blockHeightIdx];
        m_scanOrder[groupTypeIndex][blockWidthIdx][blockHeightIdx] = nullptr;
      }
    }
  }
  for (int modeIdx = 0; modeIdx < GEO_NUM_PARTITION_MODE; modeIdx++)
  {
    delete[] g_GeoParams[modeIdx];
    g_GeoParams[modeIdx] = nullptr;
  }
  delete[] g_GeoParams;
  for (int i = 0; i < GEO_NUM_PRESTORED_MASK; i++)
  {
    delete[] g_globalGeoWeights[i];
    delete[] g_globalGeoEncSADmask[i];
    g_globalGeoWeights[i]    = nullptr;
    g_globalGeoEncSADmask[i] = nullptr;
  }
}

void ScanOrderRom::initGeoTemplate()
{
  g_GeoParams = new int16_t *[GEO_NUM_PARTITION_MODE];
  int modeIdx = 0;
  for (int angleIdx = 0; angleIdx < GEO_NUM_ANGLES; angleIdx++)
  {
    for (int distanceIdx = 0; distanceIdx < GEO_NUM_DISTANCES; distanceIdx++)
    {
      if ((distanceIdx == 0 && angleIdx >= 16)
          || ((distanceIdx == 2 || distanceIdx == 0) && (g_angle2mask[angleIdx] == 0 || g_angle2mask[angleIdx] == 5))
          || g_angle2mask[angleIdx] == -1)
        continue;
      g_GeoParams[modeIdx]    = new int16_t[2];
      g_GeoParams[modeIdx][0] = (int16_t) angleIdx;
      g_GeoParams[modeIdx][1] = (int16_t) distanceIdx;
      modeIdx++;
    }
  }
  for (int angleIdx = 0; angleIdx < (GEO_NUM_ANGLES >> 2) + 1; angleIdx++)
  {
    if (g_angle2mask[angleIdx] == -1)
      continue;
    g_globalGeoWeights[g_angle2mask[angleIdx]]    = new int16_t[GEO_WEIGHT_MASK_SIZE * GEO_WEIGHT_MASK_SIZE];
    g_globalGeoEncSADmask[g_angle2mask[angleIdx]] = new int16_t[GEO_WEIGHT_MASK_SIZE * GEO_WEIGHT_MASK_SIZE];

    int     distanceX = angleIdx;
    int     distanceY = (distanceX + (GEO_NUM_ANGLES >> 2)) % GEO_NUM_ANGLES;
    int16_t rho       = (g_Dis[distanceX] << (GEO_MAX_CU_LOG2 + 1)) + (g_Dis[distanceY] << (GEO_MAX_CU_LOG2 + 1));
    static const int16_t maskOffset = (2 * GEO_MAX_CU_SIZE - GEO_WEIGHT_MASK_SIZE) >> 1;
    int                  index      = 0;
    for (int y = 0; y < GEO_WEIGHT_MASK_SIZE; y++)
    {
      int16_t lookUpY = (((y + maskOffset) << 1) + 1) * g_Dis[distanceY];
      for (int x = 0; x < GEO_WEIGHT_MASK_SIZE; x++, index++)
      {
        int16_t sx_i                                         = ((x + maskOffset) << 1) + 1;
        int16_t weightIdx                                    = sx_i * g_Dis[distanceX] + lookUpY - rho;
        int     weightLinearIdx                              = 32 + weightIdx;
        g_globalGeoWeights[g_angle2mask[angleIdx]][index]    = Clip3(0, 8, (weightLinearIdx + 4) >> 3);
        g_globalGeoEncSADmask[g_angle2mask[angleIdx]][index] = weightIdx > 0 ? 1 : 0;
      }
    }
  }

  for (int hIdx = 0; hIdx < GEO_NUM_CU_SIZE; hIdx++)
  {
    int16_t height = 1 << (hIdx + GEO_MIN_CU_LOG2);
    for (int wIdx = 0; wIdx < GEO_NUM_CU_SIZE; wIdx++)
    {
      int16_t width = 1 << (wIdx + GEO_MIN_CU_LOG2);
      for (int splitDir = 0; splitDir < GEO_NUM_PARTITION_MODE; splitDir++)
      {
        int16_t angle    = g_GeoParams[splitDir][0];
        int16_t distance = g_GeoParams[splitDir][1];
        int16_t offsetX  = (GEO_WEIGHT_MASK_SIZE - width) >> 1;
        int16_t offsetY  = (GEO_WEIGHT_MASK_SIZE - height) >> 1;
        if (distance > 0)
        {
          if (angle % 16 == 8 || (angle % 16 != 0 && height >= width))
          {
            offsetY += angle < 16 ? ((distance * (int32_t) height) >> 3) : -((distance * (int32_t) height) >> 3);
          }
          else
          {
            offsetX += angle < 16 ? ((distance * (int32_t) width) >> 3) : -((distance * (int32_t) width) >> 3);
          }
        }
        g_weightOffset[hIdx][wIdx][splitDir][0] = offsetX;
        g_weightOffset[hIdx][wIdx][splitDir][1] = offsetY;
      }
    }
  }
}
int16_t **g_GeoParams;
int16_t * g_globalGeoWeights[GEO_NUM_PRESTORED_MASK];
int16_t * g_globalGeoEncSADmask[GEO_NUM_PRESTORED_MASK];
int8_t    g_angle2mask[GEO_NUM_ANGLES]   = { 0, -1, 1, 2, 3, 4, -1, -1, 5, -1, -1, 4, 3, 2, 1, -1,
                                             0, -1, 1, 2, 3, 4, -1, -1, 5, -1, -1, 4, 3, 2, 1, -1 };
int8_t    g_Dis[GEO_NUM_ANGLES]          = { 8,  8,  8,  8,  4,  4,  2,  1,  0, -1, -2, -4, -4, -8, -8, -8,
                                            -8, -8, -8, -8, -4, -4, -2, -1, 0, 1,  2,  4,  4,  8,  8,  8 };
int8_t    g_angle2mirror[GEO_NUM_ANGLES] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                             0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2 };
int16_t   g_weightOffset[GEO_NUM_CU_SIZE][GEO_NUM_CU_SIZE][GEO_NUM_PARTITION_MODE][2];

ScanOrderRom g_scanOrderRom;
ScanElement g_coefTopLeftDiagScan8x8[MAX_CU_SIZE / 2 + 1][64];

// ====================================================================================================================
// Data structure related table & variable
// ====================================================================================================================

const int g_quantScales[2][SCALING_LIST_REM_NUM] = // can be represented as a 9 element table
{
    { 26214,23302,20560,18396,16384,14564 },
    { 18396,16384,14564,13107,11651,10280 } // Note: last 3 values of second row == half of the first 3 values of the first row
};

const int g_invQuantScales[2][SCALING_LIST_REM_NUM] = // can be represented as a 9 element table
{
  { 40,45,51,57,64,72 },
  { 57,64,72,80,90,102 } // Note: last 3 values of second row == double of the first 3 values of the first row
};

//--------------------------------------------------------------------------------------------------
//structures
//--------------------------------------------------------------------------------------------------
//coefficients
//--------------------------------------------------------------------------------------------------
// ====================================================================================================================
// Intra prediction
// ====================================================================================================================

const uint8_t g_aucIntraModeNumFast_UseMPM_2D[7 - MIN_CU_LOG2 + 1][7 - MIN_CU_LOG2 + 1] =
{
  {3, 3, 3, 3, 2, 2},  //   4x4,   4x8,   4x16,   4x32,   4x64,   4x128,
  {3, 3, 3, 3, 3, 2},  //   8x4,   8x8,   8x16,   8x32,   8x64,   8x128,
  {3, 3, 3, 3, 3, 2},  //  16x4,  16x8,  16x16,  16x32,  16x64,  16x128,
  {3, 3, 3, 3, 3, 2},  //  32x4,  32x8,  32x16,  32x32,  32x64,  32x128,
  {2, 3, 3, 3, 3, 2},  //  64x4,  64x8,  64x16,  64x32,  64x64,  64x128,
  {2, 2, 2, 2, 2, 3},  // 128x4, 128x8, 128x16, 128x32, 128x64, 128x128,
};

const uint8_t g_aucIntraModeNumFast_UseMPM[MAX_CU_DEPTH] =
{
  3,  //   2x2
  8,  //   4x4
  8,  //   8x8
  3,  //  16x16
  3,  //  32x32
  3,  //  64x64
  3   // 128x128
};
const uint8_t g_aucIntraModeNumFast_NotUseMPM[MAX_CU_DEPTH] =
{
  3,  //   2x2
  9,  //   4x4
  9,  //   8x8
  4,  //  16x16   33
  4,  //  32x32   33
  5,  //  64x64   33
  5   // 128x128
};

const uint8_t g_chroma422IntraAngleMappingTable[NUM_INTRA_MODE] =
//                                                                     H                                                               D                                                               V
//0, 1,  2,  3,  4,  5,  6,  7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, DM
{ 0, 1, 61, 62, 63, 64, 65, 66, 2, 3,  4,  6,  8, 10, 12, 13, 14, 16, 18, 20, 22, 23, 24, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 44, 44, 45, 46, 46, 46, 47, 48, 48, 48, 49, 50, 51, 52, 52, 52, 53, 54, 54, 54, 55, 56, 56, 56, 57, 58, 59, 60, DM_CHROMA_IDX };




// ====================================================================================================================
// Misc.
// ====================================================================================================================
const int                 g_ictModes[2][4] = { { 0, 3, 1, 2 }, { 0, -3, -1, -2 } };

const UnitScale g_miScaling( MIN_CU_LOG2, MIN_CU_LOG2 );


// ====================================================================================================================
// Context model mapping
// ====================================================================================================================

const uint32_t g_uiMinInGroup[LAST_SIGNIFICANT_GROUPS] = { 0,1,2,3,4,6,8,12,16,24,32,48,64,96 };
const uint32_t g_uiGroupIdx[MAX_TB_SIZEY] = { 0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9, 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 };
const uint32_t g_auiGoRiceParsCoeff[32] =
{
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3
};

const char *MatrixType[SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM] =
{
  {
    "INTRA1X1_LUMA",
    "INTRA1X1_CHROMAU",
    "INTRA1X1_CHROMAV",
    "INTER1X1_LUMA",
    "INTER1X1_CHROMAU",
    "INTER1X1_CHROMAV"
  },
  {
    "INTRA2X2_LUMA",
    "INTRA2X2_CHROMAU",
    "INTRA2X2_CHROMAV",
    "INTER2X2_LUMA",
    "INTER2X2_CHROMAU",
    "INTER2X2_CHROMAV"
  },
  {
    "INTRA4X4_LUMA",
    "INTRA4X4_CHROMAU",
    "INTRA4X4_CHROMAV",
    "INTER4X4_LUMA",
    "INTER4X4_CHROMAU",
    "INTER4X4_CHROMAV"
  },
  {
    "INTRA8X8_LUMA",
    "INTRA8X8_CHROMAU",
    "INTRA8X8_CHROMAV",
    "INTER8X8_LUMA",
    "INTER8X8_CHROMAU",
    "INTER8X8_CHROMAV"
  },
  {
    "INTRA16X16_LUMA",
    "INTRA16X16_CHROMAU",
    "INTRA16X16_CHROMAV",
    "INTER16X16_LUMA",
    "INTER16X16_CHROMAU",
    "INTER16X16_CHROMAV"
  },
  {
    "INTRA32X32_LUMA",
    "INTRA32X32_CHROMAU",
    "INTRA32X32_CHROMAV",
    "INTER32X32_LUMA",
    "INTER32X32_CHROMAU",
    "INTER32X32_CHROMAV"
  },
  {
    "INTRA64X64_LUMA",
    "INTRA64X64_CHROMAU_FROM16x16_CHROMAU",
    "INTRA64X64_CHROMAV_FROM16x16_CHROMAV",
    "INTER64X64_LUMA",
    "INTER64X64_CHROMAU_FROM16x16_CHROMAU",
    "INTER64X64_CHROMAV_FROM16x16_CHROMAV"
  },
};

const char *MatrixType_DC[SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM] =
{
  {  //1x1
  },
  {
  },
  {
  },
  {
  },
  {
    "INTRA16X16_LUMA_DC",
    "INTRA16X16_CHROMAU_DC",
    "INTRA16X16_CHROMAV_DC",
    "INTER16X16_LUMA_DC",
    "INTER16X16_CHROMAU_DC",
    "INTER16X16_CHROMAV_DC"
  },
  {
    "INTRA32X32_LUMA_DC",
    "INTRA32X32_CHROMAU_DC",
    "INTRA32X32_CHROMAV_DC",
    "INTER32X32_LUMA_DC",
    "INTER32X32_CHROMAU_DC",
    "INTER32X32_CHROMAV_DC"
  },
  {
    "INTRA64X64_LUMA_DC",
    "INTRA64X64_CHROMAU_DC_FROM16x16_CHROMAU",
    "INTRA64X64_CHROMAV_DC_FROM16x16_CHROMAV",
    "INTER64X64_LUMA_DC",
    "INTER64X64_CHROMAU_DC_FROM16x16_CHROMAU",
    "INTER64X64_CHROMAV_DC_FROM16x16_CHROMAV"
  },
};

const int g_quantTSDefault4x4[4 * 4] =
{
  16,16,16,16,
  16,16,16,16,
  16,16,16,16,
  16,16,16,16
};

const int g_quantIntraDefault8x8[8 * 8] =
{
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16
};

const int g_quantInterDefault8x8[8 * 8] =
{
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16
};

const uint32_t g_scalingListSize [SCALING_LIST_SIZE_NUM] = { 1, 4, 16, 64, 256, 1024, 4096 };
const uint32_t g_scalingListSizeX[SCALING_LIST_SIZE_NUM] = { 1, 2,  4,  8,  16,   32,   64 };

const uint8_t g_aucChromaScale[NUM_CHROMA_FORMAT][chromaQPMappingTableSize] =
{
  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,29,30,31,32,33,33,34,34,35,35,36,36,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63 },
  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,63,63,63,63,63 },
  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,63,63,63,63,63 }
};

} // namespace vvenc

//! \}

